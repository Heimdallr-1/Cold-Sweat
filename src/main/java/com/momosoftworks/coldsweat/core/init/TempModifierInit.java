package com.momosoftworks.coldsweat.core.init;

import com.momosoftworks.coldsweat.api.registry.TempModifierRegistry;
import com.momosoftworks.coldsweat.api.temperature.block_temp.BlockTempConfig;
import com.momosoftworks.coldsweat.api.temperature.block_temp.LavaBlockTemp;
import com.momosoftworks.coldsweat.config.WorldSettingsConfig;
import com.momosoftworks.coldsweat.util.compat.CompatManager;
import com.momosoftworks.coldsweat.util.math.CSMath;
import com.momosoftworks.coldsweat.util.serialization.ConfigHelper;
import com.momosoftworks.coldsweat.util.world.BlockPos;
import com.momosoftworks.coldsweat.util.world.BlockState;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import com.momosoftworks.coldsweat.ColdSweat;
import com.momosoftworks.coldsweat.api.event.core.BlockTempRegisterEvent;
import com.momosoftworks.coldsweat.api.event.core.TempModifierRegisterEvent;
import com.momosoftworks.coldsweat.api.registry.BlockTempRegistry;
import com.momosoftworks.coldsweat.api.temperature.modifier.*;
import net.minecraft.block.Block;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;

import java.util.*;
import java.util.function.Predicate;

public class TempModifierInit
{
    // Trigger registry events
    public static void buildRegistries()
    {
        TempModifierRegistry.flush();
        BlockTempRegistry.flush();

        try { MinecraftForge.EVENT_BUS.post(new TempModifierRegisterEvent()); }
        catch (Exception e)
        {   ColdSweat.LOGGER.error("Registering TempModifiers failed!", e);
        }

        try { MinecraftForge.EVENT_BUS.post(new BlockTempRegisterEvent()); }
        catch (Exception e)
        {   ColdSweat.LOGGER.error("Registering BlockTemps failed!", e);
        }
    }

    // Register BlockTemps
    @SubscribeEvent
    public void registerBlockTemps(BlockTempRegisterEvent event)
    {
        // Add BlockTemps auto-generated by config
        for (Object obj : ConfigHelper.deserializeList(WorldSettingsConfig.blockTemps))
        {
            if (!(obj instanceof List)) continue;
            List<?> effectBuilder = (List<?>) obj;
            try
            {
                // Get IDs associated with this config entry
                String[] blockIDs = ((String) effectBuilder.get(0)).split(",");
                // Temp of block
                final double blockTemp = Double.parseDouble(ConfigHelper.stripString(effectBuilder.get(1)));
                // Range of effect
                final double blockRange = Double.parseDouble(ConfigHelper.stripString(effectBuilder.get(2)));

                // Weakens over distance?
                final boolean weaken = effectBuilder.size() < 4 || Boolean.parseBoolean(ConfigHelper.stripString(effectBuilder.get(3)));

                // Get min/max effect
                final double maxChange = effectBuilder.size() == 5
                                         ? Double.parseDouble(ConfigHelper.stripString(effectBuilder.get(4)))
                                         : Double.MAX_VALUE;

                final double maxEffect = blockTemp > 0 ?  maxChange :  Double.MAX_VALUE;
                final double minEffect = blockTemp < 0 ? -maxChange : -Double.MAX_VALUE;

                // Parse block IDs into blocks
                Block[] effectBlocks = Arrays.stream(blockIDs).map(ConfigHelper::getBlocks).flatMap(List::stream).toArray(Block[]::new);

                // Get block predicate
                Predicate<Integer> blockPredicate = (i) -> true;
                if (effectBuilder.size() == 6 && effectBuilder.get(5) instanceof String)
                {
                    // Separate comma-delineated predicates
                    String predicate = ((String) effectBuilder.get(5));
                    blockPredicate = (i) -> predicate.contains(String.valueOf(i));
                }

                event.register(new BlockTempConfig(blockPredicate, effectBlocks)
                {
                    @Override
                    public double getTemperature(World world, EntityLivingBase entity, BlockState state, BlockPos pos, double distance)
                    {
                        // Check the list of predicates first
                        if (this.testPredicate(state))
                        {   return weaken ? CSMath.blend(blockTemp, 0, distance, 0.5, blockRange) : blockTemp;
                        }
                        return  0;
                    }

                    @Override
                    public double maxEffect()
                    {   return maxEffect;
                    }

                    @Override
                    public double minEffect()
                    {   return minEffect;
                    }
                });
            }
            catch (Exception e)
            {   ColdSweat.LOGGER.error("Invalid configuration for BlockTemps in config file \"main.toml\"", e);
                break;
            }
        }

        event.register(new LavaBlockTemp());
        /*event.register(new FurnaceBlockTemp());
        event.register(new CampfireBlockTemp());
        event.register(new IceboxBlockTemp());
        event.register(new BoilerBlockTemp());
        event.register(new SoulCampfireBlockTemp());
        event.register(new NetherPortalBlockTemp());*/
    }

    // Register TempModifiers
    @SubscribeEvent
    public void registerTempModifiers(TempModifierRegisterEvent event)
    {
        long startMS = System.currentTimeMillis();
        String compatPath = "com.momosoftworks.coldsweat.api.temperature.modifier.compat.";
        String sereneSeasons = compatPath + "SereneSeasonsTempModifier";
        String betterWeather = compatPath + "BetterWeatherTempModifier";
        String armorUnder = compatPath + "ArmorUnderTempModifier";
        String weatherStorms = compatPath + "StormTempModifier";

        event.register(BlockTempModifier::new);
        event.register(BiomeTempModifier::new);
        event.register(DepthTempModifier::new);
        event.register(InsulationTempModifier::new);
        event.register(MountTempModifier::new);
        event.register(WaterskinTempModifier::new);
        event.register(SoulLampTempModifier::new);
        event.register(WaterTempModifier::new);
        event.register(HearthTempModifier::new);
        event.register(FoodTempModifier::new);
        event.register(FreezingTempModifier::new);
        event.register(FireTempModifier::new);
        event.register(SoulSproutTempModifier::new);

        // Compat
        if (CompatManager.isSereneSeasonsLoaded())
        {   event.registerByClassName(sereneSeasons);
        }
        if (CompatManager.isArmorUnderwearLoaded())
        {   event.registerByClassName(armorUnder);
        }
        if (CompatManager.isWeather2Loaded())
        {   event.registerByClassName(weatherStorms);
        }
        if (CompatManager.isBetterWeatherLoaded())
        {   event.registerByClassName(betterWeather);
        }

        ColdSweat.LOGGER.debug("Registered TempModifiers in " + (System.currentTimeMillis() - startMS) + "ms");
    }
}
