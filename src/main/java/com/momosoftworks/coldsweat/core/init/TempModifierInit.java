package com.momosoftworks.coldsweat.core.init;

import com.momosoftworks.coldsweat.api.registry.TempModifierRegistry;
import com.momosoftworks.coldsweat.api.temperature.block_temp.LavaBlockTemp;
import com.momosoftworks.coldsweat.util.compat.CompatManager;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import com.momosoftworks.coldsweat.ColdSweat;
import com.momosoftworks.coldsweat.api.event.core.BlockTempRegisterEvent;
import com.momosoftworks.coldsweat.api.event.core.TempModifierRegisterEvent;
import com.momosoftworks.coldsweat.api.registry.BlockTempRegistry;
import com.momosoftworks.coldsweat.api.temperature.modifier.*;
import net.minecraftforge.common.MinecraftForge;

public class TempModifierInit
{
    // Trigger registry events
    public static void buildRegistries()
    {
        TempModifierRegistry.flush();
        BlockTempRegistry.flush();

        try { MinecraftForge.EVENT_BUS.post(new TempModifierRegisterEvent()); }
        catch (Exception e)
        {   ColdSweat.LOGGER.error("Registering TempModifiers failed!");
            e.printStackTrace();
        }

        try { MinecraftForge.EVENT_BUS.post(new BlockTempRegisterEvent()); }
        catch (Exception e)
        {   ColdSweat.LOGGER.error("Registering BlockTemps failed!");
            e.printStackTrace();
        }
    }

    // Register BlockTemps
    @SubscribeEvent
    public void registerBlockTemps(BlockTempRegisterEvent event)
    {
        // Add BlockTemps auto-generated by config
        /*for (List<Object> effectBuilder : ColdSweatConfig.getInstance().getBlockTemps())
        {
            try
            {
                // Check if required fields are present
                if (!(effectBuilder.get(0) instanceof String)
                || !(effectBuilder.get(1) instanceof Number)
                || !(effectBuilder.get(2) instanceof Number))
                {
                    throw new Exception("Invalid BlockTemp format");
                }

                String[] blockIDs = ((String) effectBuilder.get(0)).split(",");

                final double temp    = ((Number) effectBuilder.get(1)).doubleValue();
                final double range   = ((Number) effectBuilder.get(2)).doubleValue();
                final boolean weaken = effectBuilder.size() < 4 || !(effectBuilder.get(3) instanceof Boolean) || (boolean) effectBuilder.get(3);

                final double maxChange = effectBuilder.size() == 5 && effectBuilder.get(4) instanceof Number
                        ? ((Number) effectBuilder.get(4)).doubleValue()
                        : Double.MAX_VALUE;

                final double maxEffect = temp > 0 ?  maxChange :  Double.MAX_VALUE;
                final double minEffect = temp < 0 ? -maxChange : -Double.MAX_VALUE;

                List<Block> effectBlocks = new ArrayList<>();

                for (String id : blockIDs)
                {
                    effectBlocks.addAll(ConfigHelper.getBlocks(id));
                }

                event.register(
                        new BlockTemp(effectBlocks.toArray(new Block[0]))
                        {
                            @Override
                            public double getTemperature(PlayerEntity player, BlockState state, BlockPos pos, double distance)
                            {
                                return weaken ? CSMath.blend(temp, 0, distance, 0.5, range) : temp;
                            }

                            @Override
                            public double maxEffect()
                            {
                                return maxEffect;
                            }

                            @Override
                            public double minEffect()
                            {
                                return minEffect;
                            }
                        });
            }
            catch (Exception e)
            {
                ColdSweat.LOGGER.error("Invalid configuration for BlockTemps in config file \"main.toml\"");
                e.printStackTrace();
                break;
            }
        }*/

        event.register(new LavaBlockTemp());
        /*event.register(new FurnaceBlockTemp());
        event.register(new CampfireBlockTemp());
        event.register(new IceboxBlockTemp());
        event.register(new BoilerBlockTemp());
        event.register(new SoulCampfireBlockTemp());
        event.register(new NetherPortalBlockTemp());*/
    }

    // Register TempModifiers
    @SubscribeEvent
    public void registerTempModifiers(TempModifierRegisterEvent event)
    {
        long startMS = System.currentTimeMillis();
        String compatPath = "com.momosoftworks.coldsweat.api.temperature.modifier.compat.";
        String sereneSeasons = compatPath + "SereneSeasonsTempModifier";
        String betterWeather = compatPath + "BetterWeatherTempModifier";
        String armorUnder = compatPath + "ArmorUnderTempModifier";
        String weatherStorms = compatPath + "StormTempModifier";

        event.register(BlockTempModifier::new);
        event.register(BiomeTempModifier::new);
        event.register(DepthTempModifier::new);
        event.register(InsulationTempModifier::new);
        event.register(MountTempModifier::new);
        event.register(WaterskinTempModifier::new);
        event.register(SoulLampTempModifier::new);
        event.register(WaterTempModifier::new);
        event.register(HearthTempModifier::new);
        event.register(FoodTempModifier::new);
        event.register(FreezingTempModifier::new);
        event.register(FireTempModifier::new);
        event.register(SoulSproutTempModifier::new);

        // Compat
        if (CompatManager.isSereneSeasonsLoaded())
        {   event.registerByClassName(sereneSeasons);
        }
        if (CompatManager.isArmorUnderwearLoaded())
        {   event.registerByClassName(armorUnder);
        }
        if (CompatManager.isWeather2Loaded())
        {   event.registerByClassName(weatherStorms);
        }
        if (CompatManager.isBetterWeatherLoaded())
        {   event.registerByClassName(betterWeather);
        }

        ColdSweat.LOGGER.debug("Registered TempModifiers in " + (System.currentTimeMillis() - startMS) + "ms");
    }
}
